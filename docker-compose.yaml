version: "3.9"
services:
  proxy:
    image: nginx:1.25.3-alpine3.18
    container_name: dictate-proxy
    restart: unless-stopped
    ports:
      - 80:80
      - 3478:3478
      - 3478:3478/udp

      # TURN Ports
      # - 49160-49163:49160-49163/udp
    networks:
      - frontend
    volumes:
      - ./services/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
      - websocket
      - relay
  app:
    image: dictate
    container_name: dictate-app
    command: "gunicorn core.wsgi:application"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    volumes:
      - recording-temp-storage:/opt/dictate/media
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      setup:
        condition: service_completed_successfully
  websocket:
    image: dictate
    container_name: dictate-websocket
    command: "daphne -b 0.0.0.0 -p 80 core.asgi:application"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      setup:
        condition: service_completed_successfully
  worker:
    image: dictate
    container_name: dictate-worker
    command: "celery -A core worker -l INFO --concurrency 2"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    volumes:
      - recording-temp-storage:/opt/dictate/media
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - app
      - websocket
  relay:
    image: coturn/coturn:alpine3.18
    container_name: dictate-relay
    command: --psql-userdb="postgresql://${AWS_RDS_USER}:${AWS_RDS_PASSWORD}@${AWS_RDS_HOST}:5432/coturn"
    restart: unless-stopped
    volumes:
      - ./services/coturn.conf:/etc/coturn/turnserver.conf:ro
    networks:
      - frontend
      - backend
    depends_on:
      setup:
        condition: service_completed_successfully
  setup:
    image: dictate
    build: .
    container_name: dictate-setup
    command: "python manage.py setup_db --ensure-connection-only"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    networks:
      - backend
volumes:
  recording-temp-storage:
    name: dictate-recording-temp-storage
    driver: local
networks:
  frontend:
    name: dictate-frontend
  backend:
    name: dictate-backend
