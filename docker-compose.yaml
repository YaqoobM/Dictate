version: "3.9"
services:
  proxy:
    image: nginx:1.25.3-alpine3.18
    container_name: dictate-proxy
    restart: unless-stopped
    ports:
      - 80:80
      - 3478:3478
      - 3478:3478/udp

      # TURN Ports
      # - 49160-49163:49160-49163/udp
    networks:
      - frontend
    volumes:
      - ./services/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
      - websocket
      - relay
  app:
    build: .
    container_name: dictate-app
    command: "gunicorn core.wsgi:application"
    environment:
      - DOCKER_COMPOSE=true
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      db-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      redis:
        condition: service_started
  websocket:
    build: .
    container_name: dictate-websocket
    command: "daphne -b 0.0.0.0 -p 80 core.asgi:application"
    environment:
      - DOCKER_COMPOSE=true
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      db-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      redis:
        condition: service_started
  worker:
    build: .
    container_name: dictate-worker
    command: "celery -A core worker -l INFO --uid nobody --gid nogroup --concurrency 2"
    environment:
      - DOCKER_COMPOSE=true
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - app
      - websocket
      - redis
  relay:
    image: coturn/coturn:alpine3.18
    container_name: dictate-relay
    restart: unless-stopped
    volumes:
      - ./services/coturn.conf:/etc/coturn/turnserver.conf:ro
    networks:
      - frontend
      - backend
    depends_on:
      db-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
  postgres:
    image: postgres:16-alpine3.18
    container_name: dictate-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./services/coturn_schema.sql:/docker-entrypoint-initdb.d/coturn_schema.sql:ro
    networks:
      - backend
  redis:
    image: redis:7.2-alpine3.18
    container_name: dictate-redis
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - backend
  db-setup:
    build: .
    container_name: dictate-db-setup
    command: "python manage.py setup_db"
    environment:
      - DOCKER_COMPOSE=true
    networks:
      - backend
    depends_on:
      - postgres
volumes:
  postgres:
    name: dictate-postgres
    driver: local
  redis:
    name: dictate-redis
    driver: local
networks:
  frontend:
    name: dictate-frontend
  backend:
    name: dictate-backend
