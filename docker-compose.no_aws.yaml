version: "3.9"
name: dictate_no_aws
services:
  proxy:
    image: nginx:1.25.3-alpine3.18
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 3478:3478
      - 3478:3478/udp
      - 5349:5349

      # TURN Ports
      # - 49160-49163:49160-49163/udp
    networks:
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf.template:/etc/nginx/templates/http.conf.template:ro
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    environment:
      - DOMAIN_NAME=${DICTATE_HOST}
    depends_on:
      - app
      - websocket
      - relay
  app:
    image: dictate
    command: "gunicorn core.wsgi:application"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    volumes:
      - recording-temp-storage:/opt/dictate/media
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      redis:
        condition: service_started
  websocket:
    image: dictate
    command: "daphne -b 0.0.0.0 -p 80 core.asgi:application"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      redis:
        condition: service_started
  worker:
    image: dictate
    command: "celery -A core worker -l INFO --concurrency 2"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    volumes:
      - recording-temp-storage:/opt/dictate/media
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - app
      - websocket
      - redis
  relay:
    image: coturn/coturn:alpine3.18
    command:
      [
        "--psql-userdb",
        "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/coturn",
      ]
    restart: unless-stopped
    volumes:
      - ./coturn/coturn.conf:/etc/coturn/turnserver.conf:ro
    networks:
      - frontend
      - backend
    depends_on:
      setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
  postgres:
    image: postgres:16-alpine3.18
    restart: unless-stopped
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./coturn/coturn_schema.sql:/docker-entrypoint-initdb.d/coturn_schema.sql:ro
    networks:
      - backend
  redis:
    image: redis:7.2-alpine3.18
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - backend
  setup:
    image: dictate
    build: .
    command: "python manage.py setup_db --ensure-connection-only"
    environment:
      - ENVIRONMENT=production
      - DOCKER_COMPOSE=true
    networks:
      - backend
    depends_on:
      - postgres
volumes:
  recording-temp-storage:
    driver: local
  postgres:
    driver: local
  redis:
    driver: local
networks:
  frontend:
  backend:
